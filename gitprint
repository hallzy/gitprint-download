#!/bin/bash

#isURL() - Checks if the input is a url or not#{{{
isURL () {
  regex='https://github.com/[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
  string=$1
  if [[ $string =~ $regex ]]; then
    echo "1"
  else
    echo "0"
  fi
}
#}}}

# urlCharacterReplacement() - Replaces special characters for use in a URL #{{{

urlCharacterReplacement () {
  input=$1

  # # = %23
  input=${input/\#/%23}

  echo "$input"
}
#}}}

#downloadFile() - Downloads the pdf file from gitprint#{{{
downloadFile () {
  url=$1
  destDir=$2

  url="${url}?download"
  wget $url

  # Find the file in the cwd that contains "?download". This is appended to the
  # filename after being downloaded
  pdf=$(find . -maxdepth 1 -name "*\?download" -print)

  echo "pdf: $pdf"

  # remove extensions. These are the 3 extensions supported by gitprint, so I
  # will too
  newpdf=${pdf/.mdown/}
  newpdf=${newpdf/.markdown/}
  newpdf=${newpdf/.md/}

  # Remove "?download" from the filename, and add .pdf
  newpdf=${newpdf/?download/.pdf}

  # Rename the file to get rid of ?download and the md extensions
  mv $pdf $newpdf
  if [ $? -eq 0 ]; then
    # If the rename passed, display the current name and location
    echo "The file is in \"$(pwd)\" as \"$newpdf\""
    # Move the file to destDir
    if [[ $(pwd) != $destDir ]]; then
      mv $newpdf $destDir
      if [ $? -eq 0 ]; then
        # If that move passes, display the new location
        echo "The file is now in \"$destDir\" as \"$newpdf\""
      else
        # Otherwise, state that the file did not move and is still in the other
        # place
        echo "failed move to destination Directory"
        echo "The file is still in \"$(pwd)\" as \"$newpdf\""
      fi
    fi
  else
    # If the rename failed, state that, and the location and name of the file
    echo "failed rename"
    echo "The file is still in \"$(pwd)\" as \"$pdf\""
  fi


}
#}}}

# urlScript() - uses the input the download the gitprint version of the file#{{{
urlScript () {
  url=$1
  destDir=$2
  url=${url/github.com/gitprint.com}
  # Replace special URL characters
  url=$(urlCharacterReplacement $url)

  downloadFile $url $destDir

}
#}}}

#filenameScript() - uses the input and the url in the git config file to download the gitprint version#{{{
filenameScript () {
  file=$1
  branch=$2
  destDir=$3

  echo "file: $file"
  echo "branch: $branch"
  echo "destDir: $destDir"

  # Separate filepath from file name
  filename=$(basename $file)
  filepath=${file/$filename/}

  # If filepath is empty, it is in the current directory
  if [[ -z $filepath ]]; then
    filepath="./"
  fi

  cd $filepath

  echo "File Name: $filename"
  echo "File Path: $filepath"

  # if branch is empty, make it the current checked out branch
  if [[ "$branch" == "ifIAmStillAssignedThisChangeMeToCurrentlyCheckedOutBranch" ]]; then
    branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
  fi
  # Replace special URL characters
  branch=$(urlCharacterReplacement $branch)

  # This is the url you use to clone a repo, so it needs to be changed in order
  # to be used properly.
  url=$(git config --get remote.origin.url)
  # Remove the .git at the end, and add ".git/blob/<branch>/<filename>"
  url=${url/.git/\/blob\/$branch\/$filename}
  # replace github with gitprint in the url
  url=${url/github.com/gitprint.com}

  # For naming the file, change the # to a _. Bash does not like it otherwise
  echo "$url"
  downloadFile $url $destDir

}
#}}}

# Start of the script#{{{

# Initializations#{{{

badArgs="false"
showVersion="false"

# Initialize branch as empty
branch="ifIAmStillAssignedThisChangeMeToCurrentlyCheckedOutBranch"

# Initialize the destDir as the current working directory
destDir=$(pwd)
#}}}

# Check Arguments#{{{

# Check Argument 1#{{{

# If argument 1 is missing, do not execute. This is the file or URL and we need this
# Set badArgs to true if missing. We can use this also to get the version number
if [[ -z $1 ]]; then
  showVersion="true"
fi
#}}}

# Check Argument 2#{{{

# If arg 2 exists, find out what it is. If it is not a flag identifier set
# badArgs to true
if [[ $2 ]]; then
  echo "Argument 2: $2 $3"
  if [[ "$2" == "--dest-dir" ]]; then
    destDir=$3
  elif [[ "$2" == "--branch" ]]; then
    branch=$3
  else
    badArgs="true"
    echo "Argument 2 is not an identifiable flag"
  fi
fi
#}}}

# Check Argument 3#{{{

# If arg 4 exists, find out what it is. If it is not a flag identifier set
# badArgs to true
if [[ $4 ]]; then
  echo "Argument 3: $4 $5"
  if [[ "$4" == "--dest-dir" ]]; then
    destDir=$5
  elif [[ "$4" == "--branch" ]]; then
    branch=$5
  else
    badArgs="true"
    echo "Argument 3 is not an identifiable flag"
  fi
fi
#}}}
#}}}

# Get the absolute path of destDir#{{{

cd $destDir
destDir=$(pwd)
# Direct to /dev/null because I do not want to see the output of this.
cd - > /dev/null

#}}}

# Main#{{{

if [[ "$showVersion" == "true" ]]; then
  echo "Version 0.0.0"
else
  # If the script arguments cannot be read throw an error.
  if [[ "$badArgs" == "false" ]]; then
    isurl=$(isURL $1)
    # if the input is a URL
    if (( "$isurl" == "1" )); then
      echo "Input is a URL"
      urlScript $1 $destDir
    # if the input is not a URL, asssume it is a filename
    elif (( $"isurl" == "0" )); then
      echo "input is a filename"
      filenameScript $1 $branch $destDir
    else
      echo "Error: Could not determine of the input was a filename or a URL."
    fi
  else
    echo "An error occured while parsing the arguments"
  fi
fi

#}}}

#}}}

