#!/bin/bash

#isURL() - Checks if the input is a url or not#{{{
isURL () {
  regex='https://github.com/[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
  string=$1
  if [[ $string =~ $regex ]]; then
    echo "1"
  else
    echo "0"
  fi
}
#}}}

#downloadFile() - Downloads the pdf file from gitprint#{{{
downloadFile () {
  url=$1

  url="${url}?download"
  wget $url

  # Get the name of the file. This is the name of the file that is given by
  # default after downloading from wget, but removing "?download" from the end,
  # and replacing it with ".pdf"
  pdf=$(find . -maxdepth 1 -name "*?download" -print)
  newpdf=${pdf/.md/}
  newpdf=${newpdf/?download/.pdf}

  mv $pdf $newpdf

  echo "The file is in the current directory as \"$newpdf\""
}
#}}}

# urlScript() - uses the input the download the gitprint version of the file#{{{
urlScript () {
  url=$1
  url=${url/github.com/gitprint.com}

  downloadFile $url

}
#}}}

#filenameScript() - uses the input and the url in the git config file to download the gitprint version#{{{
filenameScript () {
  filename=$1
  branch=$2

  # if a # is in the branch name, change it to %23. This is the code used in a
  # URL for a #.
  branch=${branch/\#/%23}
  # This is the url you use to clone a repo, so it needs to be changed in order
  # to be used properly.
  url=$(git config --get remote.origin.url)
  # Remove the .git at the end, and add ".git/blob/<branch>/<filename>"
  url=${url/.git/\/blob\/$branch\/$filename}
  # replace github with gitprint in the url
  url=${url/github.com/gitprint.com}

  # For naming the file, change the # to a _. Bash does not like it otherwise
  echo "$url"
  downloadFile $url

}
#}}}

# Start of the script#{{{
# If argument 1 is missing, do not execute
if [[ -z $1 ]]; then
  echo "Missing argument 1:"
  echo "Expected a filename, or URL"
else
  isurl=$(isURL $1)
  # if the input is a URL
  if (( "$isurl" == "1" )); then
    echo "Input is a URL"
    # If there is an argument 2, state that it is being ignored, and continue.
    # We use the branch stated in the URL.
    if [[ $2 ]]; then
      echo "We do not use argument two for URLs because the URL states the branch"
      echo "Ignoring argument 2"
    fi
    urlScript $1
  # if the input is not a URL, asssume it is a filename
  elif (( $"isurl" == "0" )); then
    echo "input is a filename"
    if [[ $2 ]]; then
      echo "Argument 2 was specified"
      echo "Branch to use: $2"
      branch=$2
    else
      branch=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
      echo "Using the current working branch: $branch"
    fi
    filenameScript $1 $branch
  else
    echo "Error: Could not determine of the input was a filename or a URL."
  fi
fi
#}}}

